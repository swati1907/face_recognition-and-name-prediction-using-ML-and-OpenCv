import cv2
import numpy as np
import os
from sklearn.neighbors import KNeighborsClassifier
#from sklearn.model_selection import train_test_split
id=0
names={}
face_data=[]
labels=[]
filepath='./face_data_obtained/'
for file in os.listdir(filepath):
    if file.endswith('.npy'):
        
        names[id]=file[:-4]
        print('loaded data for '+ names[id])
        data=np.load(filepath+file)
        face_data.append(data)
        label=id*np.ones(data.shape[0],)
        labels.append(label) 
        id+=1 
labels=np.concatenate(labels,axis=0).reshape(-1,1)
face_data=(np.concatenate(face_data,axis=0))

print(face_data.shape)


#preapring our knn model
#X_train,X_test,y_train,y_test=train_test_split(face_data,labels,random_state=0)
knn= KNeighborsClassifier(n_neighbors=3)
#print(X_train.shape,y_train.shape)
#knn.fit(X_train,y_train)
knn.fit(face_data,labels)

cap= cv2.VideoCapture(0)
face_cascade=cv2.CascadeClassifier(r'C:\Users\HP\Desktop\projects\haarcascade_classifier_dataset\haarcascade_frontalface_alt.xml')
skip=0
while(True):
    ret,frame=cap.read()
    gray_frame=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    frame=cv2.flip(frame,1)#to flip the frame and form a mirror image
    if ret==False:
        continue
    faces=face_cascade.detectMultiScale(frame,1.3,5)#faces contains tupples of all faces present in a frame eg. [(x1,y1,w1,h1),(x2,y2,w2,h2)]
    #sort faces on the basis of area to get the larger face
    faces=sorted(faces,key=lambda f:f[2]*f[3],reverse=True)
    
    #cv.imshow("frame",frame)
    for face in faces[-1:]:
        
        x,y,w,h=face
        cv2.rectangle(frame,(x,y),(x+w,y+h),(255,255,0),3)
        
        
        ####to crop the frame to get only fcae section
        offset=20#offset of 20 pixels means leaving boundry of 20 pi. arround the bounding frame
        face_section=frame[y-offset:y+h+offset,x-offset:x+w+offset]
        face_section=cv2.resize(face_section,(100,100))
        face_section=face_section.reshape(1,-1)
        #print(face_section.shape,"face")
        predict=knn.predict(face_section)
        #cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])
        font=cv2.FONT_HERSHEY_SIMPLEX
        
        cv2.putText(frame,names[predict[0]],(x,y-10),font,1,(255,255,0),2,cv2.LINE_AA)
        
    
    cv2.imshow('face',face_section)
    cv2.imshow("frame",frame)
    if skip%10==0:
        pass
        
    
    if cv2.waitKey(1)& 0xFF==ord('q'):
        cv2.destroyAllWindows
        break
        





    


    