#capture images from video stream of your camer
#store the image in form of a numpy array

#1.read and capture iages
#2.detect face and draw bounding box
#3.save as a numpy array
#4.repeat for as many poeple

import cv2 as cv
import numpy as np

cap=cv.VideoCapture(0)
face_cascade=cv.CascadeClassifier("haarcascade_frontalface_alt.xml")
path='./face_data_obtained/'
face_data=[]
skip=0
filename=input("enter the name of user whose data is being stored  ")
while(True):
    ret,frame=cap.read()
    gray_frame=cv.cvtColor(frame,cv.COLOR_BGR2GRAY)
    if ret==False:
        continue
    faces=face_cascade.detectMultiScale(frame,1.3,5)#faces contains tupples of all faces present in a frame eg. [(x1,y1,w1,h1),(x2,y2,w2,h2)]
    #sort faces on the basis of area to get the larger face
    faces=sorted(faces,key=lambda f:f[2]*f[3],reverse=True)
    
    #cv.imshow("frame",frame)
    for face in faces[-1:]:
        
        x,y,w,h=face
        cv.rectangle(frame,(x,y),(x+w,y+h),(255,255,0),3)
        
        
        ####to crop the frame to get only fcae section
        offset=20#offset of 20 pixels means leaving boundry of 20 pi. arround the bounding frame
        face_section=frame[y-offset:y+h+offset,x-offset:x+w+offset]
        face_section=cv.resize(face_section,(100,100))
    skip+=1 
    cv.imshow('face',face_section)
    cv.imshow("frame",frame)
    if skip%10==0:
        
        face_data.append(face_section)
        print(len(face_data))
    
    if cv.waitKey(1)& 0xFF==ord('q'):
        break
        


face_data=np.asarray(face_data)

#reahaping face_data to have rows equal to number of faces
face_data=np.reshape(face_data,(face_data.shape[0],-1))
print(face_data.shape)
np.save(path+filename+'.npy',face_data)
print("file saved at",path+filename+'.npy')
#data = np.load("face_data_obtained/swati.npy")
#print(data)
#print(np.load(path+filename+'.npy' ))